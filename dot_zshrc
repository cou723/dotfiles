function add_path() {
    local input_string="$1"  # 引数から文字列を受け取る

    if [ -z "$input_string" ]; then
        echo "警告: 引数が空です。"
    else
        export PATH="$input_string:$PATH"
    fi
}
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
    print -P "%F{33} %F{34}Installation successful.%f%b" || \
    print -P "%F{160} The clone has failed.%f%b"
fi

# zsh settings
setopt AUTO_CD
setopt AUTO_PARAM_KEYS
setopt print_eight_bit
setopt auto_cd
setopt no_beep
setopt hist_expire_dups_first
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_save_no_dups
setopt share_history
export HISTSIZE=100000
export SAVEHIST=100000
export HISTFILE=${HOME}/.zsh_history

bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
bindkey '^[[H' beginning-of-line
bindkey '^[[F' end-of-line
bindkey "^[[3" delete-char

autoload -Uz compinit
compinit
zstyle ':completion:*:default' list-colors di=4 ex=33 '=*.c=35'
zstyle ':completion:*:(cd|less):*' matcher 'm:{a-z}={A-Z}'
zstyle ':completion:*' menu select

# zinit init
source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# theme
zinit light romkatv/powerlevel10k

# plugin
zinit light zsh-users/zsh-autosuggestions
zinit light zdharma-continuum/fast-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zdharma/history-search-multi-word
zinit light mollifier/anyframe
zinit light mattmc3/zsh-safe-rm
zinit light robertzk/send.zsh

# plugin settings
# source /usr/share/doc/fzf/examples/key-bindings.zsh

# autoload -Uz chpwd_recent_dirs cdr add -zsh-hook
# add-zsh-hook chpwd chpwd_recent_dirs

function select-history() {
    BUFFER=$(history -n -r 1 | fzf --no-sort +m --query "$LBUFFER" --prompt="History > ")
    CURSOR=$#BUFFER
}
zle -N select-history
bindkey '^r' select-history

function fzf-cdr () {
    local selected_dir="$(cdr -l | sed 's/^[0-9]\+ \+//' | fzf --prompt="cdr >" --query "$LBUFFER")"
    if [ -n "$selected_dir" ]; then
        BUFFER="cd ${selected_dir}"
        zle accept-line
    fi
}
zle -N fzf-cdr
bindkey '^E' fzf-cdr

if [[ -n $(echo ${^fpath}/chpwd_recent_dirs(N)) && -n $(echo ${^fpath}/cdr(N)) ]]; then
    autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
    add-zsh-hook chpwd chpwd_recent_dirs
    zstyle ':completion:*' recent-dirs-insert both
    zstyle ':chpwd:*' recent-dirs-default true
    zstyle ':chpwd:*' recent-dirs-max 1000
    zstyle ':chpwd:*' recent-dirs-file "$HOME/.cache/chpwd-recent-dirs"
fi

function ghq-fzf() {
    local src=$(ghq list | fzf --layout=reverse --preview "bat --color=always --style=header,grid --line-range :80 $(ghq root)/{}/(README|readme).*")
    if [ -n "$src" ]; then
        BUFFER="cd $(ghq root)/$src"
        zle accept-line
    fi
    zle -R -c
}
zle -N ghq-fzf
bindkey '^G' ghq-fzf

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

git config pull.rebase false
git config --global user.name "cou"
git config --global user.email "courange.c@gmail.com"
git config --global init.defaultBranch main

# -----------------alias-----------------
# ls(exa)
if type exa > /dev/null 2>&1; then
    alias ls='exa --grid --icons --git'
    alias ll='exa --long --icons --git'
    alias la='exa --long --icons --git -a'
    alias lt='exa --tree --icons --git'
    alias ltl='exa --tree --long --icons --git --level=2'
fi

# cat(bat)
if type bat > /dev/null 2>&1; then
    alias cat='bat'
fi

# du(dust)
if type dust > /dev/null 2>&1; then
    alias du='dust'
fi

# util
alias cd~="cd /mnt/c/Users/coura/"
alias witch="which"
alias pd="cd ../;ls"
alias untgz="tar -xzvf"
alias che="chezmoi"
alias reload="source ~/.zshrc"
alias co="code ."

# config
alias zshconfig="che edit ~/.zshrc"
alias vimconfig="che edit ./config/nvim/init.vim"

# git
if type git > /dev/null 2>&1; then
    alias ga="git add"
    alias ga.="git add ."
    alias gicm="git commit -m"
    alias gica="git commit --amend"
    alias gpsh="git push"
    alias gpl="git pull"
    alias gc="git checkout"
    alias gc.="git checkout ."
    alias gb="git branch"
    alias gm="git merge"
    alias gd="git diff"
    alias gl="git log"
    alias gcl="git clone"
    alias gsc="git switch -c"
fi

# npm
if type npm > /dev/null 2>&1; then
    alias n="npm"
    alias nr="npm run"
    alias ni="npm install"
    alias nx="npx"
fi
if type pnpm > /dev/null 2>&1; then
    alias p="pnpm"
    alias pr="pnpm run"
    alias pi="pnpm install"
    alias px="pnpm dlx"
fi
if type bun > /dev/null 2>&1; then
    alias b="bun"
    alias ba="bun add"
    alias bad="bun add --dev"
    alias br="bun run"
    alias bi="bun install"
    alias bx="bunx"
fi

# python
alias py="python3"
alias penv="python3 -m venv venv"
alias pact=". venv/bin/activate.fish"
if type poetry > /dev/null 2>&1; then
    alias poe="poetry"
fi

# github
if type gh > /dev/null 2>&1; then
    alias ghil="gh issue list"
    alias ghi="gh issue"
    alias ghic="gh issue create"
fi

# c
alias m="make"
alias mc="make clean"
alias mf="make fclean"
alias mr="make re"

# docker
if type docker > /dev/null 2>&1; then
    alias dk="docker"
    alias dc="docker compose"
    alias dkr="docker run"
    alias dkb="docker build"
fi


# -----------------path-----------------

. "$HOME/.cargo/env"

# volta
export VOLTA_HOME="$HOME/.volta"
add_path "$VOLTA_HOME/bin"

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
if type pyenv > /dev/null 2>&1; then

    eval "$(pyenv init -)"
fi

# deno path
export DENO_INSTALL="$HOME/.deno"
add_path "$DENO_INSTALL/bin"

# pnpm path
export PNPM_HOME="/home/cou/.local/share/pnpm"
add_path $PNPM_HOME

# android path
export ANDROID_HOME=$HOME/Android/Sdk
add_path "$ANDROID_HOME/emulator"
add_path "$ANDROID_HOME/tools"
add_path "$ANDROID_HOME/tools/bin"
add_path "$ANDROID_HOME/platform-tools"

# jdk
export JDK_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
add_path $JDK_HOME

# CUDA
add_path "/usr/local/cuda/bin"

# homebrew
add_path "/home/linuxbrew/.linuxbrew/bin"

# code
export PATH="/mnt/c/Program Files/Microsoft VS Code/bin:$PATH"
add_path "/mnt/c/Program Files/Microsoft VS Code/bin"


# bun
export BUN_INSTALL="$HOME/.bun"
add_path "$BUN_INSTALL/bin"
