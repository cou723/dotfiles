source ~/.profile

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
    print -P "%F{33} %F{34}Installation successful.%f%b" || \
    print -P "%F{160} The clone has failed.%f%b"
fi

# zsh settings
setopt AUTO_CD
setopt AUTO_PARAM_KEYS
setopt print_eight_bit
setopt auto_cd
setopt no_beep
setopt hist_expire_dups_first
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_save_no_dups
setopt share_history
export HISTSIZE=100000
export SAVEHIST=100000
export HISTFILE=${HOME}/.zsh_history

autoload -Uz compinit
compinit
zstyle ':completion:*:default' list-colors di=4 ex=33 '=*.c=35'
zstyle ':completion:*:(cd|less):*' matcher 'm:{a-z}={A-Z}'
zstyle ':completion:*' menu select

# zinit init
source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# theme
zinit light romkatv/powerlevel10k

# plugin
zinit light zsh-users/zsh-autosuggestions
zinit light zdharma-continuum/fast-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zdharma/history-search-multi-word
zinit light mollifier/anyframe
zinit light mattmc3/zsh-safe-rm
zinit light robertzk/send.zsh
zinit light hlissner/zsh-autopair

# plugin settings
# source /usr/share/doc/fzf/examples/key-bindings.zsh

# autoload -Uz chpwd_recent_dirs cdr add -zsh-hook
# add-zsh-hook chpwd chpwd_recent_dirs

function select-history() {
    BUFFER=$(history -n -r 1 | fzf --no-sort +m --query "$LBUFFER" --prompt="History > ")
    CURSOR=$#BUFFER
}
zle -N select-history
bindkey '^r' select-history

function fzf-cdr () {
    local selected_dir="$(cdr -l | sed 's/^[0-9]\+ \+//' | fzf --prompt="cdr >" --query "$LBUFFER")"
    if [ -n "$selected_dir" ]; then
        BUFFER="cd ${selected_dir}"
        zle accept-line
    fi
}
zle -N fzf-cdr
bindkey '^E' fzf-cdr

if [[ -n $(echo ${^fpath}/chpwd_recent_dirs(N)) && -n $(echo ${^fpath}/cdr(N)) ]]; then
    autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
    add-zsh-hook chpwd chpwd_recent_dirs
    zstyle ':completion:*' recent-dirs-insert both
    zstyle ':chpwd:*' recent-dirs-default true
    zstyle ':chpwd:*' recent-dirs-max 1000
    zstyle ':chpwd:*' recent-dirs-file "$HOME/.cache/chpwd-recent-dirs"
fi

function ghq-fzf() {
    local src=$(ghq list | fzf --layout=reverse --preview "bat --color=always --style=header,grid --line-range :80 $(ghq root)/{}/(README|readme).*")
    if [ -n "$src" ]; then
        BUFFER="cd $(ghq root)/$src"
        zle accept-line
    fi
    zle -R -c
}
zle -N ghq-fzf
bindkey '^G' ghq-fzf

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

git config --global pull.rebase false
git config --global user.name "cou"
git config --global user.email "courange.c@gmail.com"
git config --global init.defaultBranch main
git config --global push.autoSetupRemote true
git config --global core.quotepath false
git config --global core.pager "less -r"


# -----------------alias-----------------
# ls(exa)
if type exa > /dev/null 2>&1; then
    alias ls='exa --grid --icons --git'
    alias ll='exa --long --icons --git'
    alias la='exa --long --icons --git -a'
    alias lt='exa --tree --icons --git'
    alias ltl='exa --tree --long --icons --git --level=2'
else
    alias ll='ls -l'
    alias la='ls -a'
fi

# cat(bat)
if type bat > /dev/null 2>&1; then
    alias cat='bat'
fi

# du(dust)
if type dust > /dev/null 2>&1; then
    alias du='dust'
fi

# util
alias cd~="cd /mnt/c/Users/coura/"
alias witch="which"
alias pd="cd ../;ls"
alias untgz="tar -xzvf"
alias che="chezmoi"
alias reload="source ~/.zshrc"
alias co="code ."
alias cu="cursor ."

# config
alias zshconfig="che edit ~/.zshrc"
alias vimconfig="che edit ./config/nvim/init.vim"

# git
if type git > /dev/null 2>&1; then
    alias ga="git add"
    alias ga.="git add -p"
    alias gap="git add -p"
    alias gt="git status --untracked-files=all"
    alias gicm="git commit -m"
    alias gica="git commit --amend"
    alias gpsh="git push"
    alias gpl="git pull"
    alias gc="git checkout"
    alias gc.="git checkout ."
    alias gb="git branch"
    alias gm="git merge"
    alias gd="git diff"
    alias gl="git log"
    alias glo="git log --oneline"
    alias gcl="git clone"
    alias gsc="git switch -c"
fi

# npm
if type npm > /dev/null 2>&1; then
    alias n="npm"
    alias nr="npm run"
    alias ni="npm install"
    alias na="npm install --save"
    alias nad="npm install --save-dev"
    alias nx="npx"
fi

if type pnpm > /dev/null 2>&1; then
    alias p="pnpm"
    alias pr="pnpm run"
    alias pa="pnpm add"
    alias pad="pnpm add --dev"
    alias pi="pnpm install"
    alias px="pnpm dlx"
fi

if type bun > /dev/null 2>&1; then
    alias b="bun"
    alias ba="bun add"
    alias bad="bun add --dev"
    alias br="bun run"
    alias bi="bun install"
    alias bx="bunx"
fi

# python
alias py="python3"
alias penv="python3 -m venv venv"
alias pact=". venv/bin/activate"
if type poetry > /dev/null 2>&1; then
    alias poe="poetry"
fi

# github
if type gh > /dev/null 2>&1; then
    alias ghil="gh issue list"
    alias ghi="gh issue"
    alias ghic="gh issue create"
fi

# c
# alias m="make"
# alias mc="make clean"
# alias mf="make fclean"
# alias mr="make re"

# docker
if type docker > /dev/null 2>&1; then
    alias dk="docker"
    alias dc="docker compose"
    alias dkr="docker run"
    alias dkb="docker build"
    alias docker-reset="docker compose down --rmi all --volumes --remove-orphans"
fi

# direnv
if type direnv > /dev/null 2>&1; then
    eval "$(direnv hook zsh)"
fi

# go
export PATH=$PATH:/usr/local/go/bin
export GOPATH=$HOME/go
export GOROOT=/usr/local/go

# google
if [ -f '~/google-cloud-sdk/path.zsh.inc' ]; then . '~/google-cloud-sdk/path.zsh.inc'; fi
if [ -f '~/google-cloud-sdk/completion.zsh.inc' ]; then . '~/google-cloud-sdk/completion.zsh.inc'; fi


# for gui
export GTK_IM_MODULE=fcitx
export QT_IM_MODULE=fcitx
export XMODIFIERS=@im=fcitx
export DefaultIMModule=fcitx
if [ $SHLVL = 1 ] ; then
  (fcitx-autostart > /dev/null 2>&1 &)
  xset -r 49  > /dev/null 2>&1
fi


if [ -f /proc/sys/fs/binfmt_misc/WSLInterop ]; then
    echo "WSL Detected"
    # Configure ssh forwarding
    export SSH_AUTH_SOCK=$HOME/.ssh/agent.sock
    # need `ps -ww` to get non-truncated command for matching
    # use square brackets to generate a regex match for the process we want but that doesn't match the grep command running it!
    ALREADY_RUNNING=$(ps -auxww | grep -q "[n]piperelay.exe -ei -s //./pipe/openssh-ssh-agent"; echo $?)
    if [[ $ALREADY_RUNNING != "0" ]]; then
        if [[ -S $SSH_AUTH_SOCK ]]; then
            echo "removing previous socket..."
            rm $SSH_AUTH_SOCK
        fi
        echo "Starting SSH-Agent relay..."
        (setsid socat UNIX-LISTEN:$SSH_AUTH_SOCK,fork EXEC:"npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork &) >/dev/null 2>&1
    fi
else
    echo "Non WSL Loaded"
    export SSH_AUTH_SOCK="$HOME/.1password/agent.sock"
fi


bindkey -r "^[[1;5C"
bindkey "^[[1;5C" forward-word
bindkey -r "^[[1;5D"
bindkey "^[[1;5D" backward-word
bindkey '^[[H' beginning-of-line
bindkey '^[[F' end-of-line
bindkey "^[[3" delete-char
bindkey -r '^H'
bindkey '^H' backward-kill-word

# darkmode
export GTK_THEME=Adwaita:dark
export XDG_CURRENT_DESKTOP=GNOME
export QT_STYLE_OVERRIDE=Adwaita-Dark

# ssh-agent
if [ -z $SSH_AUTH_SOCK ]; then
# forwardingされえなければAgentを設定
    if [ -d /mnt/c/oss/wsl-gpg-agent ]; then
        # on wsl2
        export SSH_AUTH_SOCK=~/.ssh/agent.sock

        ALREADY_RUNNING=$(ps -auxww | grep -q "[n]piperelay.exe -ei -s //./pipe/openssh-ssh-agent")
        if [ $? -ne 0 ]; then
            rm -f $SSH_AUTH_SOCK
            (setsid socat UNIX-LISTEN:$SSH_AUTH_SOCK,fork EXEC:"/mnt/c/oss/wsl-gpg-agent/npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork & ) #> /dev/null 2>&1
        fi
    else

        # other
        SSH_KEY_LIFE_TIME_SEC=3600
        SSH_AGENT_FILE=$HOME/.ssh-agent
        test -f $SSH_AGENT_FILE && source $SSH_AGENT_FILE > /dev/null 2>&1
        if [ $( ps -ef | grep ssh-agent | grep -v grep | wc -l ) -eq 0 ]; then
            ssh-agent -t $SSH_KEY_LIFE_TIME_SEC > $SSH_AGENT_FILE
	    source $SSH_AGENT_FILE > /dev/null 2>&1
        fi
    fi

fi